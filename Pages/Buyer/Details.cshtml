
 @page
@model Auction_System.Pages.Buyer.DetailsModel
@using Microsoft.AspNetCore.Identity
@using Auction_System.Models
@inject UserManager<AppUser> UserManager

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <style>
        .product-page {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .image-section {
            background: #fff;
            padding: 1rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .main-image img {
            width: 100%;
            height: 400px;
            object-fit: contain;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .thumbnail-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 0.5rem;
        }

        .thumbnail {
            cursor: pointer;
            border: 2px solid transparent;
            border-radius: 5px;
            transition: all 0.2s ease;
        }

            .thumbnail:hover {
                border-color: #3498db;
                transform: scale(1.05);
            }

            .thumbnail img {
                width: 100%;
                height: 80px;
                object-fit: cover;
                border-radius: 3px;
            }

        .details-section {
            background: #fff;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .seller-info {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin: 1.5rem 0;
        }

        .auction-time {
            background: #fff9f2;
            border-left: 4px solid #f39c12;
            padding: 1.25rem;
            border-radius: 8px;
            margin: 1.5rem 0;
        }

        .actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-top: 2rem;
        }

        .watchlist {
            padding: 0.8rem 1.5rem;
            border-radius: 6px;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            transition: all 0.2s ease;
        }

            .watchlist:hover {
                transform: translateY(-2px);
            }

            .watchlist i {
                font-size: 1.1rem;
            }

        .alert-warning {
            background: #fff3cd;
            border-color: #ffeeba;
            color: #856404;
            padding: 1rem;
            border-radius: 6px;
        }

        .feedback-table {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }

            .feedback-table th {
                background: #f8f9fa;
                padding: 1rem;
            }

            .feedback-table td {
                padding: 1rem;
                border-top: 1px solid #dee2e6;
            }

        @@media (max-width: 768px) {
            .product-page {
                grid-template-columns: 1fr;
                padding: 1rem;
            }

            .main-image img {
                height: 300px;
            }
        }
    </style>
</head>

<div class="product-page">
    <!-- Left Section: Image Gallery -->
    <div class="image-section">
        <div class="main-image">
            <img id="displayed-image" src="@(Model.Item?.ImagePath?.Split(',')[0] ?? "/images/default.jpg")" alt="Main Product Image" />
        </div>
        <div class="thumbnail-grid">
            @foreach (var img in Model.Item?.ImagePath?.Split(',') ?? new string[0])
            {
                <div class="thumbnail" onclick="changeImage('@img')">
                    <img src="@img" alt="Thumbnail" />
                </div>
            }
        </div>
    </div>

    <!-- Right Section: Product Details -->
    <div class="details-section">
        <h1>@Model.Item?.Title</h1>

        <div class="seller-info">
            <div class="d-flex align-items-center gap-2 mb-2">
                <i class="fas fa-user-circle text-secondary"></i>
                <a class="seller-name" asp-page="/Shared/Seller/SellerRatings" asp-route-Id="@Model.Item?.SellerId">
                    @(Model.Seller?.UserName ?? "Unknown Seller")
                </a>
            </div>
        </div>

        <h3 class="text-primary">Starting Price: @Model.Item?.StartingPrice.ToString("C")</h3>

        <div class="auction-time">
            <h4><i class="fas fa-clock"></i> Auction Schedule</h4>
            <div class="row">
                <div class="col-md-6">
                    <strong>Start Time:</strong>
                    @if (Model.Item.AuctionEvent != null)
                    {
                        <span>@Model.Item.AuctionEvent.StartTime.ToString("MMM dd, yyyy hh:mm tt")</span>
                    }
                    else
                    {
                        <span class="text-muted">Not scheduled</span>
                    }
                </div>
                <div class="col-md-6">
                    <strong>End Time:</strong>
                    @if (Model.Item.AuctionEvent != null)
                    {
                        <span>@Model.Item.AuctionEvent.EndTime.ToString("MMM dd, yyyy hh:mm tt")</span>
                    }
                    else
                    {
                        <span class="text-muted">Not scheduled</span>
                    }
                </div>
            </div>

            <!-- Countdown Timer -->
            <div id="countdown" class="mt-3 fw-bold fs-5 text-danger"></div>
        </div>

        <!-- Bid Button (Only if Active) -->
        @if (Model.Item.AuctionEvent != null && Model.Item.AuctionEvent.IsActive)
        {
            <div class="actions">
                <a class="watchlist btn btn-primary" asp-page="/Buyer/BiddingProcess" asp-route-id="@Model.Item?.Id">
                    <i class="fas fa-gavel"></i> Bid NOW
                </a>
            </div>
        }
        
        else
        {
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-circle"></i> Bidding is closed. Auction @(Model.Item.AuctionEvent?.Status.ToString().ToLower() ?? "not scheduled").
            </div>
        }

        @if (User.IsInRole("Seller")) {
            <div class="actions">
                <a class="watchlist btn btn-primary" asp-page="/Buyer/BiddingProcess" asp-route-id="@Model.Item?.Id">
                    <i class="fas fa-gavel"></i> View Item Bids
                </a>
            </div>

        }

        <!-- Watchlist Button (Always Visible) -->
        <div class="actions">
            @if (Model.Item.AuctionEvent?.Status == AuctionEvent.AuctionEventStatus.Completed)
            {
                <button class="watchlist btn btn-secondary" disabled>
                    <i class="fas fa-heart"></i> Watchlist unavailable (Auction ended)
                </button>
            }
            else
            {
                @if (Model.IsInWatchlist)
                {
                    <form method="post" asp-page-handler="RemoveFromWatchlist">
                        <input type="hidden" name="id" value="@Model.Item?.Id" />
                        <button type="submit" class="watchlist btn btn-outline-danger">
                            <i class="fas fa-heart-broken"></i> Remove Watchlist
                        </button>
                    </form>
                }
                else
                {
                    <form method="post" asp-page-handler="AddToWatchlist">
                        <input type="hidden" name="id" value="@Model.Item?.Id" />
                        <button type="submit" class="watchlist btn btn-outline-primary">
                            <i class="fas fa-heart"></i> Add Watchlist
                        </button>
                    </form>
                }
            }

            
        </div>
    </div>
</div>

<!-- Winning Message -->
@if (Model.Item.AuctionEvent?.Status == AuctionEvent.AuctionEventStatus.Completed && Model.IsWinner && !Model.HasFeedback)
{
    <div class="alert alert-success mt-4">
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <h5 class="mb-2"><i class="fas fa-trophy me-2"></i>Congratulations!</h5>
                <p class="mb-0">You won this auction! Please share your experience</p>
            </div>
            <a asp-page="./Feedback/Create"
               asp-route-itemId="@Model.Item.Id"
               class="btn btn-success">
                <i class="fas fa-star me-2"></i>Leave Feedback
            </a>
        </div>
    </div>
}

<!-- Feedback Section -->
<div class="container mt-4" style="max-width: 1200px;">
    <h3><i class="fas fa-comments"></i> Feedback</h3>

    @if (Model?.Item?.Feedbacks != null && Model.Item.Feedbacks.Any())
    {
        <div class="feedback-table">
            <table class="table mb-0">
                <thead>
                    <tr>
                        <th>Buyer</th>
                        <th>Rating</th>
                        <th>Comment</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var feedback in Model.Item.Feedbacks)
                    {
                        <tr>
                            <td>
                                <i class="fas fa-user-circle me-2"></i>
                                @feedback.Buyer?.FirstName @feedback.Buyer?.LastName
                            </td>
                            <td>
                                @for (int i = 0; i < feedback.Rating; i++)
                                {
                                    <i class="fas fa-star text-warning"></i>
                                }
                            </td>
                            <td>@feedback.Comment</td>
                            <td>@feedback.FeedbackDate.ToString("MMM dd, yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> No feedback available
        </div>
    }
</div>

<script>
    // Image thumbnail switcher
    function changeImage(imageSrc) {
        document.getElementById("displayed-image").src = imageSrc;
        document.querySelectorAll('.thumbnail').forEach(thumb => {
            thumb.style.borderColor = thumb.querySelector('img').src === imageSrc ? '#3498db' : 'transparent';
        });
    }

    // Countdown timer script
    const auctionStartTime = new Date('@Model.Item?.AuctionEvent?.StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")');
    const auctionEndTime = new Date('@Model.Item?.AuctionEvent?.EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")');

    function updateCountdown() {
        const now = new Date();

        if (now < auctionStartTime) {
            // Before auction starts - countdown to start
            const diffStart = auctionStartTime - now;

            const h = Math.floor(diffStart / (1000 * 60 * 60));
            const m = Math.floor((diffStart % (1000 * 60 * 60)) / (1000 * 60));
            const s = Math.floor((diffStart % (1000 * 60)) / 1000);

            document.getElementById('countdown').innerText =
                `Auction starts in: ${h}h ${m}m ${s}s`;
        }
        else if (now >= auctionStartTime && now < auctionEndTime) {
            // Auction ongoing - countdown to end
            const diffEnd = auctionEndTime - now;

            const h = Math.floor(diffEnd / (1000 * 60 * 60));
            const m = Math.floor((diffEnd % (1000 * 60 * 60)) / (1000 * 60));
            const s = Math.floor((diffEnd % (1000 * 60)) / 1000);

            document.getElementById('countdown').innerText =
                `Time left: ${h}h ${m}m ${s}s`;
        }
        else {
            // Auction ended
            document.getElementById('countdown').innerText = "Auction ended";
            clearInterval(timerInterval);
        }
    }

    // Start countdown updates every second
    updateCountdown();
    const timerInterval = setInterval(updateCountdown, 1000);
</script>
